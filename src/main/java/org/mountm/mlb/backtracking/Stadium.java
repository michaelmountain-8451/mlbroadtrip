package org.mountm.mlb.backtracking;

/**
 * An enum representing the 30 current Major League Baseball stadiums.
 * 
 */
public enum Stadium {

	BAL (0,0), BOS (1,0), NYY (2,0), TBR (3,0), TOR (4,0), 
    CWS (5,1), CLE (6,0), DET (7,0), KCR (8,1), MIN (9,1), 
    HOU(10,1), LAA(11,3), OAK(12,3), SEA(13,3), TEX(14,1), 
    ATL(15,0), MIA(16,0), NYM(17,0), PHI(18,0), WAS(19,0), 
    CHC(20,1), CIN(21,0), MIL(22,1), PIT(23,0), STL(24,1), 
    ARI(25,3), COL(26,2), LAD(27,3), SDP(28,3), SFG(29,3);

	private final int index;
	
	// Time zone is stored if the input file contains local times instead of a
	// constant time zone. Not currently used.
	private final int timeZone;

	// A 2D array storing the driving times (in minutes) between each pair of
	// stadiums. This is an asymmetric matrix.
	private static final int[][] minutesBetween = {
		//  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29
		{   0, 380, 189, 855, 479, 627, 341, 476, 945, 995,1260,2311,2452,2408,1214, 616, 942, 201,  96,  47, 648, 470, 721, 234, 744,2025,1452,2320,2332,2458},
		{ 380,   0, 200,1228, 498, 873, 570, 648,1254,1241,1627,2575,2699,2655,1582, 989,1314, 199, 300, 420, 895, 782, 967, 547,1053,2334,1711,2584,2637,2705},
		{ 187, 198,   0,1035, 459, 713, 427, 562,1076,1081,1437,2415,2538,2494,1391, 795,1121,  17, 107, 227, 734, 600, 807, 362, 875,2156,1550,2424,2463,2544},
		{ 849,1222,1031,   0,1228,1035, 993,1036,1091,1377, 854,2147,2476,2697,1006, 419, 227,1043, 938, 811,1056, 804,1125, 947, 882,1841,1597,2168,2092,2497},
		{ 479, 497, 459,1228,   0,461,  275, 227, 884, 826,1397,2160,2284,2240,1282, 853,1314, 471, 465, 512, 483, 465, 554, 295, 692,1973,1296,2169,2222,2290},
		{ 625, 874, 710,1036, 463,   0, 308, 250, 451, 374, 965,1724,1847,1787, 848, 624,1190, 722, 681, 633,  25, 268,  98, 410, 258,1540, 859,1732,1785,1853},
		{ 340, 572, 425, 993, 277, 308,   0, 158, 694, 676,1161,2010,2134,2090,1048, 611,1080, 437, 396, 349, 330, 222, 402, 125, 493,1774,1145,2019,2072,2140},
		{ 485, 646, 570,1049, 227, 251, 168,   0, 674, 616,1181,1950,2074,2029,1068, 637,1203, 582, 541, 494, 272, 249, 343, 270, 482,1763,1085,1959,2011,2079},
		{ 945,1256,1078,1093, 884, 448, 695, 671,   0, 384, 674,1377,1580,1610, 484, 680,1246,1090,1005, 954, 469, 515, 491, 743, 213,1134, 510,1386,1439,1586},
		{ 992,1241,1077,1378, 826, 369, 675, 612, 383,   0,1051,1639,1723,1424, 857, 965,1531,1089,1048,1001, 369, 628, 292, 777, 509,1510, 774,1648,1700,1729},
		{1262,1632,1442, 858,1392, 967,1162,1171, 675,1053,   0,1301,1630,2068, 225, 689,1011,1454,1351,1234, 989, 946,1048,1205, 729, 995, 925,1322,1246,1651},
		{2308,2574,2410,2147,2160,1722,2008,1947,1375,1638,1296,   0, 358,1058,1196,1877,2301,2422,2368,2310,1734,1877,1745,2106,1568, 314, 875,  42,  90, 379},
		{2444,2693,2529,2474,2279,1841,2127,2066,1570,1716,1623, 354,   0, 739,1491,2136,2628,2541,2500,2453,1853,2051,1864,2229,1780, 641,1087, 321, 439,  26},
		{2410,2658,2495,2701,2243,1786,2093,2030,1611,1429,2068,1055, 740,   0,1853,2288,2854,2507,2465,2418,1787,2041,1710,2195,1821,1290,1149,1021,1140, 746},
		{1214,1584,1393,1009,1276, 849,1046,1056, 482, 857, 223,1201,1494,1851,   0, 696,1162,1405,1303,1186, 869, 830, 916,1090, 596, 895, 708,1222,1146,1515},
		{ 613, 986, 795, 422, 846, 625, 610, 626, 681, 967, 687,1883,2141,2287, 696,   0, 575, 807, 702, 574, 646, 394, 715, 629, 473,1582,1187,1892,1832,2162},
		{ 933,1306,1116, 227,1312,1188,1077,1189,1244,1530,1007,2300,2629,2850,1159, 573,   0,1128,1023, 895,1209, 957,1278,1031,1036,1994,1750,2321,2245,2650},
		{ 199, 199,  19,1047, 471, 725, 439, 574,1088,1093,1448,2427,2550,2506,1403, 807,1133,   0, 118, 239, 746, 612, 818, 374, 886,2168,1562,2435,2475,2556},
		{  95, 297, 107, 943, 466, 685, 399, 534,1006,1053,1348,2372,2510,2466,1302, 703,1029, 119,   0, 135, 706, 530, 778, 292, 804,2086,1512,2381,2393,2516},
		{  44, 417, 226, 813, 510, 631, 346, 481, 950, 999,1229,2312,2457,2413,1183, 573, 899, 238, 134,   0, 653, 474, 725, 239, 748,2026,1456,2321,2322,2463},
		{ 645, 893, 730,1056, 482,  21, 328, 269, 467, 372, 984,1734,1857,1785, 865, 644,1209, 742, 701, 653,   0, 288,  96, 430, 275,1556, 869,1742,1795,1863},
		{ 466, 781, 602, 807, 460, 269, 221, 239, 517, 631, 944,1883,2063,2042, 832, 395, 960, 614, 526, 475, 290,   0, 359, 264, 315,1597,1023,1892,1904,2069},
		{ 720, 969, 805,1126, 556,  97, 403, 343, 495, 293,1048,1751,1874,1707, 918, 714,1279, 817, 776, 729,  97, 358,   0, 505, 328,1609, 886,1759,1812,1880},
		{ 232, 546, 363, 947, 297, 412, 127, 262, 741, 780,1204,2107,2238,2194,1091, 626,1033, 375, 288, 240, 434, 266, 506,   0, 540,1821,1247,2116,2128,2244},
		{ 743,1054, 877, 884, 692, 257, 493, 475, 212, 508, 724,1572,1788,1818, 595, 472,1037, 889, 803, 752, 277, 313, 323, 541,   0,1286, 718,1581,1593,1794},
		{2021,2331,2154,1841,1969,1534,1771,1753,1126,1502, 990, 317, 646,1286, 890,1578,1995,2166,2080,2022,1554,1590,1600,1818,1281,   0, 764, 338, 320, 667},
		{1449,1709,1545,1597,1294, 856,1143,1081, 508, 773, 925, 874,1094,1150, 709,1185,1750,1557,1509,1458, 869,1019, 880,1245, 717, 765,   0, 883, 935,1100},
		{2316,2583,2419,2167,2168,1730,2017,1955,1384,1647,1315,  39, 323,1024,1215,1885,2320,2431,2376,2318,1743,1886,1754,2114,1577, 334, 884,   0, 124, 344},
		{2330,2636,2463,2094,2222,1784,2070,2009,1437,1700,1243,  89, 442,1142,1143,1831,2248,2475,2390,2323,1796,1899,1808,2128,1590, 321, 938, 126,   0, 463},
		{2452,2701,2538,2497,2287,1849,2136,2074,1578,1725,1646, 377,  28, 747,1514,2159,2650,2550,2508,2461,1862,2060,1873,2238,1788, 664,1096, 343, 462,   0}
	};

	Stadium(int index, int timeZone) {
		this.index = index;
		this.timeZone = timeZone;
	}

	public int getIndex() {
		return index;
	}

	public int getTimeZone() {
		return timeZone;
	}

	public int getMinutesTo(Stadium s) {
		return minutesBetween[index][s.index];
	}

	/**
	 * 
	 * @return An int whose binary representation is a <code>1</code> followed
	 *         by a number of <code>0</code>'s equal to this stadium's index
	 *         (between 0 and 30).
	 */
	public int getMask() {
		return 1 << index;
	}

}
