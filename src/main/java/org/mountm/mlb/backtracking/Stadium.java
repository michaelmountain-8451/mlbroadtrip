package org.mountm.mlb.backtracking;

/**
 * An enum representing the 30 current Major League Baseball stadiums.
 * 
 */
public enum Stadium {

	BAL (0,0), BOS (1,0), NYY (2,0), TBR (3,0), TOR (4,0), 
    CWS (5,1), CLE (6,0), DET (7,0), KCR (8,1), MIN (9,1), 
    HOU(10,1), LAA(11,3), OAK(12,3), SEA(13,3), TEX(14,1), 
    ATL(15,0), MIA(16,0), NYM(17,0), PHI(18,0), WAS(19,0), 
    CHC(20,1), CIN(21,0), MIL(22,1), PIT(23,0), STL(24,1), 
    ARI(25,3), COL(26,2), LAD(27,3), SDP(28,3), SFG(29,3);

	private final int index;
	
	// Time zone is stored if the input file contains local times instead of a
	// constant time zone. Not currently used.
	private final int timeZone;

	// A 2D array storing the driving times (in minutes) between each pair of stadiums.
    private static final int[][] minutesBetween = {
		//  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29
		{   0, 453, 248, 839, 485, 686, 387, 544, 937,1053,1232,2340,2520,2460,1192, 603, 930, 256, 136,  45, 700, 468, 774, 259, 740,2040,1440,2340,2340,2580},
		{ 447,   0, 218,1279, 605, 966, 641, 794,1265,1346,1620,2640,2820,2760,1560, 997,1363, 247, 344, 485, 987, 812,1064, 577,1071,2400,1800,2700,2700,2880},
		{ 239, 215,   0,1074, 482, 778, 451, 608,1083,1147,1410,2460,2580,2580,1365, 791,1162,  42, 137, 278, 795, 628, 868, 387, 889,2220,1620,2520,2520,2700},
		{ 828,1288, 1067,  0,1228,1012, 994,1009,1066,1355, 836,2100,2460,2700, 976, 411, 275,1097, 962, 790,1032, 787,1113, 934, 866,1800,1560,2100,2040,2460},
		{ 469, 592, 567,1240,   0, 463, 293, 226, 964, 838,1414,2160,2340,2280,1306, 880,1326, 595, 487, 500, 479, 507, 554, 311, 770,2100,1290,2220,2220,2400},
		{ 679,1041, 761,1012, 455,   0, 371, 244, 445, 384, 948,1680,1860,1800, 843, 616,1195, 790, 760, 685,  22, 260,  97, 476, 254,1560, 867,1740,1740,1920},
		{ 390, 677, 435,1000, 308, 366,   0, 162, 691, 749,1140,2040,2220,2160,1032, 604,1096, 461, 431, 398, 383, 219, 459, 151, 490,1800,1198,2040,2100,2340},
		{ 554, 838, 598,1026, 221, 247, 172,   0, 678, 633,1160,1920,2100,2100,1053, 630,1212, 624, 593, 561, 265, 246, 340, 317, 480,1800,1088,1920,1980,2160},
		{ 926,1342,1071,1069, 884, 448, 687, 669,   0, 385, 690,1428,1560,1620, 511, 674,1256,1115,1047, 935, 463, 510, 504, 731, 212,1135, 526,1440,1437,1620},
		{1045,1406,1142,1378, 834, 384, 748, 629, 385,   0,1060,1620,1680,1422, 884, 966,1560,1185,1135,1055, 388, 641, 293, 854, 510,1500, 782,1620,1680,1800},
		{1246,1620,1417, 839,1359, 949,1136,1145, 689,1056,   0,1284,1620,2100, 227, 676,1021,1440,1368,1216, 970, 928,1043,1176, 721, 985, 918,1306,1233,1620},
		{2340,2760,2460,2100,2160,1740,2040,1920,1369,1620,1271,   0, 346,1043,1166,1860,2340,2520,2400,2280,1740,1860,1740,2100,1560, 307, 872,  47,  85, 374},
		{2460,2880,2580,2400,2280,1860,2220,2100,1560,1740,1560, 331,   0, 789,1440,2100,2640,2640,2640,2520,1860,2040,1860,2280,1800, 620,1100, 305, 408,  74},
		{2520,2880,2580,2700,2280,1800,2220,2100,1620,1440,2100,1034, 738,   0,1860,2340,2940,2640,2580,2520,1800,2100,1740,2280,1860,1307,1177,1005,1114, 804},
		{1203,1680,1375, 987,1248, 841,1023,1034, 501, 872, 218,1183,1500,1860,   0, 687,1171,1398,1324,1172, 861, 816, 933,1064, 609, 887, 706,1204,1133,1500},
		{ 603, 985, 779, 403, 814, 608, 584, 599, 656, 953, 660,1860,2100,2280, 665,   0, 588, 799, 730, 560, 628, 375, 706, 613, 455,1560,1173,1860,1800,2160},
		{ 906,1399,1146, 277,1373,1190,1086,1196,1243,1560,1004,2340,2640,2880,1157, 579,   0,1158,1035, 869,1207, 958,1284,1021,1033,1980,1740,2340,2220,2640},
		{ 236, 241,  33,1083, 499, 771, 448, 602,1083,1159,1424,2460,2580,2580,1379, 788,1176,   0, 136, 279, 789, 621, 865, 395, 883,2220,1620,2460,2520,2700},
		{ 107, 343, 132, 941, 507, 736, 412, 565,1004,1124,1332,2400,2520,2580,1282, 705,1029, 133,   0, 145, 754, 540, 830, 342, 807,2100,1560,2400,2400,2640},
		{  41, 512, 300, 792, 506, 668, 384, 539, 922,1056,1209,2280,2460,2460,1163, 556, 883, 324, 177,   0, 685, 457, 760, 257, 722,1980,1440,2280,2280,2580},
		{ 686,1053, 767,1034, 462,  20, 380, 257, 447, 382, 955,1740,1860,1800, 843, 624,1251, 794, 768, 694,   0, 271, 101, 485, 262,1560, 859,1740,1800,1980},
		{ 451, 870, 590, 786, 446, 259, 212, 233, 497, 647, 920,1920,2040,2040, 807, 380, 969, 622, 568, 460, 282,   0, 363, 252, 301,1620,1019,1920,1920,2100},
		{ 782,1179, 861,1139, 549, 101, 467, 347, 487, 286,1041,1740,1920,1740, 934, 713,1319, 888, 863, 791, 103, 359,   0, 575, 332,1620, 880,1800,1860,1980},
		{ 255, 667, 375, 938, 331, 472, 146, 299, 727, 859,1197,2100,2280,2280,1080, 618,1034, 413, 347, 268, 490, 265, 567,   0, 528,1860,1273,2160,2160,2340},
		{ 730,1179, 867, 867, 671, 244, 477, 457, 204, 496, 709,1620,1800,1800, 597, 458,1065, 892, 848, 738, 266, 298, 326, 522,   0,1327, 717,1620,1620,1920},
		{2040,2460,2160,1800,1980,1560,1800,1740,1103,1500, 975, 305, 632,1298, 870,1560,1980,2220,2160,1980,1560,1620,1620,1860,1311,   0, 743, 325, 312, 661},
		{1437,1860,1560,1560,1298, 851,1194,1091, 504, 758, 904, 847,1096,1159, 688,1182,1800,1620,1560,1440, 867,1015, 885,1242, 714, 754,   0, 856, 907,1129},
		{2340,2760,2460,2160,2160,1740,2040,1980,1379,1620,1283,  34, 304, 995,1182,1860,2340,2520,2460,2280,1740,1860,1740,2100,1560, 312, 864,   0, 114, 334},
		{2340,2760,2520,2040,2220,1800,2100,2040,1407,1680,1223,  91, 444,1152,1115,1800,2280,2580,2460,2280,1800,1920,1800,2160,1620, 306, 925, 131,   0, 478},
		{2520,2880,2640,2460,2280,1860,2220,2100,1560,1740,1620, 359,  23, 755,1500,2100,2640,2700,2640,2580,1860,2040,1860,2280,1800, 633,1105, 325, 441,   0}
	};

	Stadium(int index, int timeZone) {
		this.index = index;
		this.timeZone = timeZone;
	}

	public int getIndex() {
		return index;
	}

	public int getTimeZone() {
		return timeZone;
	}

	public int getMinutesTo(Stadium s) {
		return minutesBetween[index][s.index];
	}

	/**
	 * 
	 * @return An int whose binary representation is a <code>1</code> followed
	 *         by a number of <code>0</code>'s equal to this stadium's index
	 *         (between 0 and 30).
	 */
	public int getMask() {
		return 1 << index;
	}

}
