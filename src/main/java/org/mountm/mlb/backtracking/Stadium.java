package org.mountm.mlb.backtracking;

/**
 * An enum representing the 30 current Major League Baseball stadiums.
 * 
 */
public enum Stadium {

	BAL (0,0), BOS (1,0), NYY (2,0), TBR (3,0), TOR (4,0), 
    CWS (5,1), CLE (6,0), DET (7,0), KCR (8,1), MIN (9,1), 
    HOU(10,1), LAA(11,3), OAK(12,3), SEA(13,3), TEX(14,1), 
    ATL(15,0), MIA(16,0), NYM(17,0), PHI(18,0), WAS(19,0), 
    CHC(20,1), CIN(21,0), MIL(22,1), PIT(23,0), STL(24,1), 
    ARI(25,3), COL(26,2), LAD(27,3), SDP(28,3), SFG(29,3);

	private final int index;
	
	// Time zone is stored if the input file contains local times instead of a
	// constant time zone. Not currently used.
	private final int timeZone;

	// A 2D array storing the driving times (in minutes) between each pair of
	// stadiums. This is an asymmetric matrix.
	private static final int[][] minutesBetween = {
		//  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29
		{   0, 376, 186, 847, 471, 620, 337, 469, 939, 986,1248,2292,2435,2382,1204, 605, 932, 198,  95,  47, 639, 467, 712, 231, 739,2010,1446,2300,2316,2441},
		{ 376,   0, 199,1218, 494, 869, 570, 645,1249,1236,1613,2558,2684,2632,1569, 976,1302, 197, 297, 416, 888, 780, 962, 543,1049,2320,1703,2567,2617,2690},
		{ 185, 198,   0,1026, 454, 702, 419, 551,1067,1068,1422,2391,2517,2464,1378, 784,1111,  17, 105, 224, 721, 594, 795, 357, 867,2138,1536,2400,2444,2523},
		{ 842,1213,1022,   0,1213,1029, 984,1032,1082,1367, 846,2127,2453,2669, 996, 414, 227,1034, 931, 804,1048, 797,1116, 937, 875,1823,1589,2148,2074,2474},
		{ 475, 493, 453,1216,   0, 460, 273, 225, 879, 824,1389,2147,2273,2220,1278, 848,1301, 465, 460, 505, 479, 466, 550, 291, 688,1959,1292,2155,2206,2279},
		{ 622, 870, 704,1034, 460,   0, 305, 248, 448, 374, 961,1712,1838,1770, 846, 624,1185, 716, 677, 631,  23, 267,  96, 407, 257,1528, 857,1721,1771,1844},
		{ 340, 571, 422, 986, 273, 305,   0, 154, 692, 671,1156,1994,2120,2067,1045, 605,1070, 434, 395, 348, 324, 223, 397, 125, 492,1763,1139,2002,2053,2126},
		{ 481, 645, 563,1044, 225, 250, 164,   0, 668, 614,1176,1937,2062,2010,1064, 633,1194, 575, 536, 489, 269, 251, 339, 266, 477,1748,1081,1945,1995,2068},
		{ 939,1250,1070,1087, 879, 446, 692, 667,   0, 383, 672,1369,1569,1592, 482, 676,1237,1082, 998, 948, 464, 513, 493, 738, 212,1129, 511,1377,1428,1575},
		{ 987,1235,1069,1370, 822, 369, 671, 610, 381,   0,1047,1625,1712,1405, 852, 960,1521,1081,1042, 996, 372, 625, 292, 772, 506,1499, 769,1633,1683,1718},
		{1251,1618,1427, 851,1383, 961,1157,1166, 668,1045,   0,1286,1612,2049, 223, 679,1002,1439,1340,1224, 980, 941,1042,1198, 724, 983, 916,1307,1233,1633},
		{2284,2556,2390,2133,2143,1707,1992,1931,1363,1621,1287,   0, 353,1049,1185,1857,2284,2402,2343,2289,1721,1858,1732,2083,1550, 313, 862,  41,  87, 374},
		{2429,2677,2511,2457,2265,1828,2113,2052,1558,1703,1611, 350,   0, 734,1475,2117,2608,2523,2484,2438,1842,2037,1853,2215,1767, 636,1079, 318, 432,  26},
		{2385,2632,2467,2674,2220,1767,2068,2008,1591,1408,2050,1050, 739,   0,1835,2264,2825,2479,2440,2393,1770,2015,1690,2170,1800,1275,1136,1018,1132, 745},
		{1206,1572,1382,1000,1269, 843,1042,1052, 478, 853, 223,1187,1480,1835,   0, 691,1151,1394,1294,1178, 861, 826, 910,1084, 591, 884, 703,1208,1134,1501},
		{ 605, 975, 785, 418, 842, 621, 605, 625, 675, 959, 678,1866,2122,2262, 690,   0, 569, 797, 694, 567, 640, 389, 709, 620, 468,1565,1182,1875,1815,2143},
		{ 927,1297,1107, 227,1297,1179,1068,1183,1233,1517, 997,2278,2604,2820,1147, 565,   0,1119,1015, 888,1199, 947,1267,1021,1026,1974,1740,2298,2224,2625},
		{ 198, 197,  19,1039, 467, 714, 431, 564,1079,1081,1435,2404,2529,2477,1391, 797,1124,   0, 119, 237, 734, 607, 807, 370, 879,2150,1549,2412,2456,2535},
		{  94, 295, 105, 935, 463, 678, 395, 527, 999,1045,1336,2352,2493,2440,1292, 693,1020, 117,   0, 133, 697, 527, 771, 290, 799,2070,1506,2360,2376,2499},
		{  45, 415, 225, 806, 497, 625, 342, 475, 945, 992,1219,2293,2440,2388,1175, 565, 891, 237, 134,   0, 645, 472, 718, 237, 745,2011,1452,2301,2302,2446},
		{ 643, 890, 725,1054, 481,  22, 326, 269, 465, 374, 981,1721,1847,1770, 863, 644,1205, 737, 698, 651,   0, 287,  95, 428, 274,1545, 866,1729,1780,1853},
		{ 464, 779, 596, 800, 460, 268, 221, 243, 516, 630, 941,1868,2050,2017, 829, 389, 951, 608, 523, 473, 287,   0, 355, 262, 315,1586,1023,1876,1892,2056},
		{ 715, 963, 797,1123, 552,  95, 399, 340, 496, 293,1042,1739,1865,1689, 915, 712,1273, 809, 770, 724,  98, 355,   0, 501, 326,1597, 884,1748,1798,1871},
		{ 231, 543, 360, 938, 291, 408, 125, 258, 737, 775,1198,2090,2223,2171,1087, 617,1022, 372, 286, 239, 428, 265, 501,   0, 537,1808,1243,2098,2114,2229},
		{ 738,1049, 869, 879, 688, 255, 491, 474, 211, 506, 720,1557,1776,1799, 593, 468,1030, 881, 797, 747, 273, 312, 323, 537,   0,1275, 718,1565,1581,1782},
		{2002,2313,2133,1829,1952,1519,1755,1738,1114,1489, 983, 314, 640,1271, 881,1564,1980,2145,2061,2007,1537,1576,1587,1801,1268,   0, 757, 335, 319, 661},
		{1445,1704,1538,1593,1291, 855,1139,1079, 509, 769, 919, 864,1087,1139, 703,1182,1744,1550,1504,1454, 869,1019, 879,1241, 718, 760,   0, 872, 923,1093},
		{2293,2565,2399,2152,2152,1716,2001,1940,1372,1630,1306,  38, 320,1016,1204,1866,2303,2411,2352,2298,1730,1867,1740,2092,1559, 331, 871,   0, 120, 341},
		{2311,2620,2442,2081,2207,1771,2055,1995,1423,1685,1236,  90, 440,1136,1134,1816,2232,2453,2369,2306,1785,1885,1795,2109,1576, 320, 926, 128,   0, 461},
		{2434,2682,2516,2476,2270,1833,2118,2057,1563,1708,1630, 369,  25, 740,1495,2136,2627,2528,2489,2443,1847,2042,1858,2220,1772, 656,1084, 337, 452,   0}
	};

	Stadium(int index, int timeZone) {
		this.index = index;
		this.timeZone = timeZone;
	}

	public int getIndex() {
		return index;
	}

	public int getTimeZone() {
		return timeZone;
	}

	public int getMinutesTo(Stadium s) {
		return minutesBetween[index][s.index];
	}

	/**
	 * 
	 * @return An int whose binary representation is a <code>1</code> followed
	 *         by a number of <code>0</code>'s equal to this stadium's index
	 *         (between 0 and 30).
	 */
	public int getMask() {
		return 1 << index;
	}

}
