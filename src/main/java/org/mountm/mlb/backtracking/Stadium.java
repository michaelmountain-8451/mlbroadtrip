package org.mountm.mlb.backtracking;

/**
 * An enum representing the 30 current Major League Baseball stadiums.
 * 
 */
public enum Stadium {

	BAL (0,0), BOS (1,0), NYY (2,0), TBR (3,0), TOR (4,0), 
    CWS (5,1), CLE (6,0), DET (7,0), KCR (8,1), MIN (9,1), 
    HOU(10,1), LAA(11,3), OAK(12,3), SEA(13,3), TEX(14,1), 
    ATL(15,0), MIA(16,0), NYM(17,0), PHI(18,0), WAS(19,0), 
    CHC(20,1), CIN(21,0), MIL(22,1), PIT(23,0), STL(24,1), 
    ARI(25,3), COL(26,2), LAD(27,3), SDP(28,3), SFG(29,3);

	private final int index;
	
	// Time zone is stored if the input file contains local times instead of a
	// constant time zone. Not currently used.
	private final int timeZone;

	// A 2D array storing the driving times (in minutes) between each pair of
	// stadiums. This is an asymmetric matrix.
	private static final int[][] minutesBetween = {
		//  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29
		{   0, 365, 181, 822, 447, 661, 379, 529, 910,1035,1208,2220,2340,2340,1170, 589, 912, 193, 135,  43, 679, 452, 757, 249, 715,1980,1410,2220,2220,2400},
		{ 442,   0, 217,1261, 576, 933, 615, 765,1239,1306,1620,2580,2640,2640,1560, 990,1351, 245, 343, 485, 951, 786,1028, 554,1044,2280,1740,2580,2580,2700},
		{ 232, 214,   0,1051, 440, 752, 435, 584,1059,1126,1385,2400,2460,2460,1347, 780,1141,  34, 133, 276, 770, 605, 847, 374, 864,2160,1560,2400,2400,2520},
		{ 817,1176, 991,   0,1170, 999, 983,1001,1053,1338, 819,2040,2340,2580, 958, 388, 272,1003, 946, 780,1017, 772,1094, 914, 851,1740,1560,2040,1980,2400},
		{ 450, 573, 544,1206,   0, 439, 282, 211, 941, 794,1387,2040,2160,2100,1285, 872,1295, 575, 469, 481, 458, 487, 530, 299, 746,1860,1241,2100,2100,2160},
		{ 661, 994, 677,1005, 438,   0, 355, 239, 432, 375, 921,1620,1740,1740, 819, 617,1181, 688, 736, 670,  21, 254,  98, 466, 249,1500, 831,1680,1680,1800},
		{ 372, 643, 408, 987, 263, 355,   0, 156, 669, 728,1115,1980,2100,2040,1013, 600,1069, 420, 417, 381, 373, 215, 450, 145, 474,1740,1162,1980,2040,2160},
		{ 523, 795, 533,1005, 212, 240, 157,   0, 649, 614,1116,1860,1980,1980,1015, 617,1181, 544, 568, 532, 258, 234, 335, 295, 455,1680,1047,1860,1920,2040},
		{ 909,1304,1035,1059, 841, 430, 671, 649,   0, 369, 661,1337,1500,1500, 484, 671,1235,1047,1025, 918, 447, 495, 483, 714, 207,1068, 504,1348,1360,1560},
		{1036,1369,1033,1344, 791, 378, 730, 614, 368,   0,1022,1560,1620,1349, 845, 956,1500,1044,1110,1045, 377, 629, 284, 834, 491,1432, 744,1560,1620,1680},
		{1211,1560,1380, 825,1317, 919,1116,1113, 658,1022,   0,1230,1560,1980, 215, 648,1001,1391,1330,1187, 937, 904,1014,1154, 698, 937, 876,1248,1177,1560},
		{2220,2640,2280,2040,2040,1620,1980,1860,1320,1560,1234,   0, 336,1008,1139,1800,2220,2280,2340,2220,1680,1800,1680,2040,1500, 302, 825,  39,  86, 364},
		{2400,2760,2400,2340,2160,1800,2100,1980,1500,1620,1560, 336,   0, 760,1405,2040,2520,2400,2460,2400,1800,1980,1800,2160,1740, 610,1049, 305, 419,  73},
		{2340,2700,2340,2580,2100,1680,2040,1920,1500,1337,1980,1013, 716,   0,1740,2160,2760,2400,2460,2340,1680,1920,1620,2160,1740,1223,1094, 982,1097, 778},
		{1167,1620,1336, 963,1211, 814,1011,1008, 482, 845, 214,1140,1413,1800,   0, 662,1138,1348,1287,1143, 832, 799, 909,1048, 593, 847, 674,1157,1086,1440},
		{ 586, 946, 760, 392, 819, 614, 598, 616, 668, 953, 645,1800,2040,2220, 662,   0, 568, 772, 715, 549, 633, 387, 710, 608, 466,1500,1169,1800,1740,2040},
		{ 915,1258,1084, 277,1252,1178,1068,1181,1232,1500, 997,2220,2520,2760,1136, 567,   0,1085,1037, 871,1196, 952,1273,1005,1030,1920,1740,2220,2160,2580},
		{ 231, 242,  32,1050, 451, 768, 450, 600,1075,1141,1392,2400,2520,2460,1354, 787,1139,   0, 132, 275, 786, 621, 863, 389, 880,2160,1560,2400,2460,2580},
		{ 104, 286, 102, 923, 446, 736, 419, 565,1000,1106,1304,2340,2460,2460,1266, 690,1013, 112,   0, 147, 751, 542, 828, 340, 805,2040,1500,2340,2340,2520},
		{  47, 402, 218, 782, 473, 666, 379, 529, 914,1040,1178,2220,2400,2340,1140, 550, 872, 230, 173,   0, 684, 456, 761, 254, 719,1920,1415,2220,2220,2460},
		{ 677,1011, 695,1022, 455,  19, 372, 256, 446, 375, 938,1680,1800,1740, 836, 634,1198, 706, 752, 686,   0, 273,  97, 485, 264,1500, 845,1680,1740,1860},
		{ 447, 846, 574, 776, 438, 255, 214, 234, 496, 628, 904,1800,1980,1920, 802, 389, 953, 585, 564, 456, 273,   0, 350, 252, 302,1560, 997,1800,1860,2040},
		{ 758,1092, 771,1102, 529, 100, 453, 337, 483, 285,1018,1680,1800,1620, 916, 715,1279, 782, 833, 767,  99, 352,   0, 563, 330,1560, 859,1680,1740,1860},
		{ 246, 643, 347, 917, 279, 465, 144, 295, 713, 839,1155,2040,2160,2160,1053, 610,1007, 359, 334, 255, 483, 255, 560,   0, 518,1800,1214,2040,2100,2220},
		{ 713,1108, 839, 856, 658, 247, 475, 453, 206, 491, 695,1560,1680,1740, 593, 469,1032, 851, 829, 722, 264, 299, 326, 518,   0,1271, 707,1560,1560,1740},
		{1980,2340,2040,1740,1860,1500,1740,1680,1057,1419, 938, 299, 609,1228, 843,1500,1920,2040,2100,1920,1500,1560,1560,1740,1261,   0, 714, 317, 301, 638},
		{1407,1800,1500,1560,1238, 828,1160,1045, 501, 744, 876, 826,1033,1109, 671,1170,1740,1500,1500,1416, 845, 993, 857,1212, 706, 718,   0, 837, 887,1098},
		{2220,2640,2280,2040,2040,1680,1980,1860,1330,1560,1253,  38, 306, 978,1156,1800,2220,2340,2340,2220,1680,1800,1680,2040,1560, 317, 836,   0, 123, 334},
		{2220,2640,2340,1980,2100,1680,2040,1920,1347,1620,1172,  87, 419,1091,1077,1740,2160,2340,2340,2220,1740,1860,1740,2040,1560, 299, 886, 120,   0, 448},
		{2400,2760,2400,2400,2160,1800,2100,1980,1500,1680,1560, 354,  23, 742,1423,2040,2580,2400,2520,2400,1800,1980,1800,2220,1740, 629,1056, 323, 438,   0}
	};

	Stadium(int index, int timeZone) {
		this.index = index;
		this.timeZone = timeZone;
	}

	public int getIndex() {
		return index;
	}

	public int getTimeZone() {
		return timeZone;
	}

	public int getMinutesTo(Stadium s) {
		return minutesBetween[index][s.index];
	}

	/**
	 * 
	 * @return An int whose binary representation is a <code>1</code> followed
	 *         by a number of <code>0</code>'s equal to this stadium's index
	 *         (between 0 and 30).
	 */
	public int getMask() {
		return 1 << index;
	}

}
